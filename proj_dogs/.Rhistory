dems_countries_age$Eng <- ifelse(dems_countries_age$destination_language == 'eng', 1, 0)
## filter for English Speaking countries
EngSpeakingCountries <- dems_countries %>%
group_by(country_destination) %>%
filter(destination_language == "eng") %>%
select(country_destination, destination_language) %>%
unique() %>%
ungroup()
# turn age bucket into level-ed factor
dems_countries_age$age_bucket <- factor(dems_countries_age$age_bucket, levels = c("0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80-84", "85-89", "90-94", "95-99", "100+"))
## Users/Gender/Destination
ggplot(data = dems_countries_gender, aes(x = reorder(country_destination,n), y = n, fill = gender)) +
geom_bar(position = "stack", stat = "identity") +
scale_fill_manual(values = c('#fd5c63', '#484848'), name = "") +
scale_y_continuous(labels = comma) +
labs(x = "Destination Country", y = "Number of Travelers (in Thousands)") +
theme_minimal()
## Users/Age Groups/English Speaking Countries
ggplot(data = filter(dems_countries_age, country_destination %in% EngSpeakingCountries$country_destination), aes(x = age_bucket, y = n, fill = country_destination)) +
geom_bar(stat = "identity",position = "fill" ) +
scale_fill_manual(values = rev(c('#ff5a5f', '#00a699', '#007D8C', '#484848')),
name = "Destinations") +
scale_y_continuous(labels = percent) +
labs(x = "", y = "Percentage of Travelers") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "bottom")
## non English Speaking Countries
ggplot(data = filter(dems_countries_age, !country_destination %in% EngSpeakingCountries$country_destination), aes(x = age_bucket, y = n, fill = country_destination)) +
geom_bar(stat = "identity",position = "fill" ) +
scale_fill_manual(values = rev(c('#fc642d', '#00a699','#ff5a5f' ,'#007D8C', '#484848','#919191')), guide = guide_legend(nrow = 1, title = 'Destinations')) +
scale_y_continuous(labels = percent) +
labs(x = "", y = "Percentage of Travelers", title = 'Non-English Speaking Countries') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "bottom")
## age buckets // destination// percent of travelers
dems_countries_age <- dems_countries_age %>%
group_by(country_destination, Eng) %>%
mutate(total = sum(n), perc = n/total* 100) %>%
ungroup()
# dems_countries_age <- dems_countries_age %>%
#   group_by(age_bucket, Eng) %>%
#   mutate(tot_age = sum(n), perc_age = n/tot_age * 100) %>%
#   ungroup()
eng_names <- c("0" = "Non-English Speaking Countries", "1" = "English-Speaking Countries")
ggplot(data = dems_countries_age, aes(x = age_bucket, country_destination, fill = perc)) +
geom_tile(colour = "white") +
scale_fill_gradient(low = "#00a699", high = "#fc642d", name = "% Users") +
facet_wrap(~Eng, scales = "free", labeller = as_labeller(eng_names)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x="",
y="",
title = "",
subtitle="")
## donut chart
dems_countries_age$US <- ifelse(dems_countries_age$country_destination == "US", 1, 0)
dems_countries_donut <- dems_countries_age %>%
group_by(US, age_bucket) %>%
summarize(tot_country = sum(n)) %>%
ungroup() %>%
group_by(age_bucket) %>%
mutate(tot_group = sum(tot_country), fraction = tot_country/tot_group) %>%
ungroup()
dems_countries_donut <- dems_countries_donut[order(dems_countries_donut$fraction), ]
dems_countries_donut <- dems_countries_donut %>%
group_by(age_bucket) %>%
mutate(ymax = cumsum(fraction), ymin = 1-fraction)
dems_countries_donut$ymin <-ifelse(dems_countries_donut$ymax != 1, 0, dems_countries_donut$ymin)
ggplot(dems_countries_donut, aes(fill = factor(US), ymax = ymax, ymin = ymin, xmax = 4, xmin = 2.5)) +
geom_rect(colour = "grey30") +
coord_polar(theta = "y") +
xlim(c(0, 4)) +
theme_minimal() +
facet_wrap(~age_bucket, nrow = 5, ncol = 11) +
scale_fill_manual(values = c("#fd5c63", "#484848"), name = '',
labels = c("Not US", "US")) +
#scale_fill_gradient(low = "#fd5c63", high = "#484848", name = "% Users") +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
theme(legend.position = c(0.96, 0.27)) +
guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5)) +
#theme(legend.position = 'none') +
labs(title = "Percentage of Airbnb Users Traveling to US vs. Other Countries",
subtitle = "By Age Groups")
## Joo to title later.
# range of seconds spent per session
range(training$secs_elapsed, na.rm = TRUE)
#graphing types of devices used to book Airbnb
device_type <- training %>% group_by(device_type) %>% tally %>% arrange(desc(n))
device_type <- na.omit(device_type)
ggplot(device_type, aes(x = reorder(device_type, n), y = n)) +
geom_bar(stat = "identity", aes(fill = device_type)) +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = rev(c('#00a699', '#fc642d', '#007D8C','#fc642d', '#00a699','#ff5a5f' ,'#007D8C', '#484848','#919191', '#fc642d', '#00a699','#ff5a5f' ,'#007D8C', '#484848'))) +
labs(x = '', y = '') +
theme(legend.position = 'none')
#create variable with combined device categories
training <- training %>% mutate(broad_device = device_type)
#group values into broader categories
training$broad_device[str_detect(training$broad_device, "Desktop")] <- "Desktop"
training$broad_device[str_detect(training$broad_device, "Phone")] <- "Mobile"
training$broad_device[str_detect(training$broad_device, "Tablet")] <- "Tablet"
training$broad_device[str_detect(training$broad_device, "Blackberry")] <- "Mobile"
training$broad_device[str_detect(training$broad_device, "Chromebook")] <- "Laptop"
training$broad_device[str_detect(training$broad_device, "-unknown-")] <- "Unknown"
#combine dataset
combined <- training %>% group_by(broad_device) %>% tally %>% arrange(desc(n))
combined <- na.omit(combined)
#ggplot bar graph
ggplot(combined, aes(x = reorder(broad_device, n), y = n)) +
geom_bar(stat = "identity", aes(fill = broad_device)) +
coord_flip() +
theme_minimal() +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = c("#ff5a5f", '#fc642d', '#00a699','#919191' ,'#484848', '#007D8C')) +
labs( x = '', y = '')
#by device for each country
device_country <- training %>% group_by(country_destination, broad_device) %>% tally
summarize(device_country)
device_country <- na.omit(device_country)
ggplot(device_country, aes(x = reorder(country_destination, n), y = n)) +
geom_bar(stat = "identity", aes(fill = broad_device)) +
theme_minimal() +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = c("#ff5a5f", '#fc642d', '#00a699','#919191' ,'#484848', '#007D8C'), name = "Devices") +
labs(x = '', y = '')
days_bet <- training %>%
mutate(days_between = date_first_booking - date_account_created)
#filter only those who booked between 0 and 10 days
days_bet2 <- days_bet %>% filter(days_between >= 0 & days_between <= 10)
days_bet2$days_between <- as.numeric(days_bet2$days_between)
#violin chart
ggplot(days_bet2, aes(x = country_destination, y = days_between)) +
geom_violin() +
theme_minimal() +
labs(x = '', y = '')
range(unique(days_bet$days_between), na.rm = TRUE) #between -349 to 365 days between when you first create account and when you first book
days_bet3 <- days_bet %>% filter(days_between >= 0)
days_bet3 <- days_bet3 %>% mutate(days_group = days_between)
days_bet3$days_group <- as.numeric(days_bet3$days_group)
days_bet3$days_group <- cut(days_bet3$days_group,
breaks = c(-1, 1, 14, 30, 90, Inf),
labels = c("same or next day", "two weeks", "one month", "three months",
"three months post"), ordered = TRUE)
days_bet4 <- days_bet3 %>% group_by(country_destination, days_group) %>% tally
days_bet4 <- days_bet4 %>% group_by(country_destination) %>% mutate(percentage = n / sum(n))
#bar graph by country and by time between date when account first created and date when first booked
ggplot(days_bet4) +
geom_bar(aes(x = reorder(country_destination, n), y = n, fill = days_group),
stat = "identity") +
theme_minimal() +
scale_fill_manual(values = c("#ff5a5f", '#fc642d', '#00a699','#919191' ,'#484848', '#007D8C'), name = "When Booked") +
labs(x = '', y = '')
# Grasping the classification scheme of "actions"
# action_type --> action_detail --> action (least to most specific)
length(unique(training$action))
length(unique(training$action_detail))
length(unique(training$action_type))
actions <- training %>%
group_by(id, action) %>%
tally()
#Airbnb pink: "#FF5A5F" teal: "#00A699" lighter blue: "#6BB7B9" orange: "#FC642D" cream color: "#FFF6E6" gray: "#484848" light gray: "#767676"
# Visualizing the frequency of action_types
training %>%
filter(is.na(action_type) == FALSE) %>%
group_by(action_type) %>%
tally() %>%
ggplot(aes(x = reorder(action_type, n), y = n)) +
geom_bar(stat = "identity", fill = "#FF5A5F") +
coord_flip() +
labs(x = NULL, y = NULL, title = "Frequency of Action Types") +
scale_y_continuous(labels = comma) +
theme_minimal() +
theme(legend.position = "none")
training %>%
filter(action_type == "data") %>%
group_by(action) %>%
tally() %>%
ggplot(aes(x = reorder(action, n), y = n)) +
geom_bar(stat = "identity", fill = "#00A699")  +
coord_flip() +
scale_y_continuous(labels = comma) +
labs(x = NULL, y = NULL, title = "Decomposition of Action Type 'Data'") +
theme_minimal() +
theme(legend.position = "none")
training %>%
filter(action_type == "view") %>%
group_by(action) %>%
tally() %>%
ggplot(aes(x = reorder(action, n), y = n)) +
geom_bar(stat = "identity", fill = "#00A699")  +
coord_flip() +
scale_y_continuous(labels = comma) +
labs(x = NULL, y = NULL, title = "Decomposition of Action Type 'View'") +
theme_minimal() +
theme(legend.position = "none")
# Find users who have completed the "confirm_email" action
email <- training %>%
filter(action == "confirm_email") %>%
group_by(id, action) %>%
count() %>%
ungroup()
# Subset data to only those for which we have "actions" data
date <- training %>%
filter(date_account_created >= "2014-01-01") %>%
group_by(id) %>%
count() %>%
ungroup()
confirm <- c('Confirmed (30,986)' = dim(email)[1]/500, 'Not Confirmed (45,480)' = (dim(date)[1] - dim(email)[1])/500)
cols <- c("#00A699", "#6BB7B9")
waffle(confirm, rows = 7, colors = c("#6BB7B9", "#767676"), size = .3, title = "Airbnb Users with Confirmed Emails", xlab = "1 square = 500 users")
train %>%
filter(country_destination == "US") %>%
filter(affiliate_provider == "google" | affiliate_provider == "direct" | affiliate_provider == "other") %>%
group_by(country_destination, affiliate_provider) %>%
tally() %>%
ungroup() %>%
mutate(pct = round(n/59236, digits = 2)*100) %>%
arrange(desc(n)) %>%
ggplot(aes(x = reorder(country_destination, n), y = n)) +
geom_bar(stat = "identity", aes(fill = affiliate_provider), width = .2) +
scale_fill_manual(values = c('#ffadb0', '#ff8589','#ff5a5f')) +
geom_text(aes(label = paste0(affiliate_provider, sep = "\n", pct, "%") , hjust = 1.1), color = "white", check_overlap = TRUE) +
coord_flip() +
theme_tufte() +
labs(x = NULL, y = NULL, title = "How Airbnb Users Book Trips in the U.S.") +
theme(legend.position = "none",
axis.text = element_blank(),
axis.ticks = element_blank())
train %>%
filter(!(country_destination == "NDF" | gender == "-unknown-" | gender == "OTHER")) %>%
group_by(gender, country_destination) %>%
tally() %>%
ggplot(aes(x = reorder(country_destination, n), y = n)) +
geom_bar(stat = "identity", aes(fill = gender)) +
labs(x = NULL, y = NULL) +
scale_y_continuous(labels = comma) +
scale_fill_manual( values = c('#fd5c63', '#484848'), name = "") +
theme_minimal()
language <- merge(train[, c("id", "gender", "age", "language", "country_destination")], countries[,  c("country_destination", "destination_language")], by = "country_destination", all.x = TRUE)
language$english_speaker <- ifelse(language$language == "en", "English", "Other")
language <- language %>% filter(age <= 115)
language$age_bucket <- cut(language$age, breaks = c(0, 4, 9, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64, 69, 74, 79, 84, 89, 94, 99, 100))
language$age_bucket <- factor(language$age, levels = c("0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80-84", "85-89", "90-94", "95-99", "100+"))
language %>%
filter(!(gender == "-unknown-" | gender == "OTHER" | country_destination == "NDF")) %>%
group_by(age_bucket, gender, country_destination, english_speaker) %>%
tally() %>%
ggplot(aes(axis1 = age_bucket, axis2 = gender, axis3 = country_destination,
weight = n)) +
scale_x_discrete(limits = c("Age", "Gender", "Country"), expand = c(.1, .05)) +
geom_alluvium(aes(fill = english_speaker)) +
geom_stratum() + geom_text(stat = "stratum", label.strata = TRUE) +
theme_minimal()
# Further ideas:
#
# Polish up this alluviate graph
# Look at distance to country
# Make a map
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Dropbox/QMSS/Thesis/Analysis")
library(tidyverse)
library(knitr)
library(ggthemes)
fulldf_bully <- read_rds("fulldf_bully.RData")
bully_how <- read_rds("fulldf_how.RData") # these are students who WERE bullied.
fulldf_sub <- read_rds("fulldf_sub.RData") # these are the students who answered ALL bullying questions
schoolcounts <- read_csv("schoolcounts.csv")
schoolprops <- read_csv("schoolprops.csv")
fulldf_bully$Y2014 <- ifelse(fulldf_bully$Year == 2014, 1, 0)
fulldf_bully$Y2015 <- ifelse(fulldf_bully$Year == 2015, 1, 0)
fulldf_bully$Y2016 <- ifelse(fulldf_bully$Year == 2016, 1, 0)
fulldf_bully$Y2017 <- ifelse(fulldf_bully$Year == 2017, 1, 0)
summary(model <- glm(bullied ~Y2017 + why_race + why_from + why_race + why_appearahce, data = bully_how))
fulldf_bully$Y2017 <- ifelse(fulldf_bully$Year == 2017, 1, 0)
bully_how$Y2017 <- ifelse(fulldf_bully$Year == 2017, 1, 0)
View(bully_how)
bully_sub$Y2017 <- ifelse(fulldf_sub$Year == 2017, 1, 0)
fulldf_sub$Y2017 <- ifelse(fulldf_sub$Year == 2017, 1, 0)
summary(model <- glm(bullied ~ Y2017 + why_race + why_from + why_race + why_appearahce, data = fulldf_sub))
summary(model <- glm(bullied ~ Y2017 + why_race + why_from + why_race + why_appearance, data = fulldf_sub))
shiny::runApp('Documents/GitHub/GroupA_WomensHealth/docs')
runApp('Documents/GitHub/project-4-open-project-group1/doc/test')
runApp('Documents/GitHub/GroupA_WomensHealth/docs')
runApp('Documents/GitHub/GroupA_WomensHealth/docs')
ggplot(top25, aes(x = reorder(word, n), y = n, fill = doc_id)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("purple", "white")) +
labs(x = "", y = "", title = "Frequency of Top 25 Words", subtitle = "Comparison of Pro-Life and Pro-Choice Organizations") +
coord_flip() +
theme(axis.ticks = element_blank(),
legend.title = element_blank(),
legend.text = element_text(color = 'white'),
axis.text = element_text(color = 'white'))
}, bg = "transparent")
ggplot(top25, aes(x = reorder(word, n), y = n, fill = doc_id)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("purple", "white")) +
labs(x = "", y = "", title = "Frequency of Top 25 Words", subtitle = "Comparison of Pro-Life and Pro-Choice Organizations") +
coord_flip() +
theme(axis.ticks = element_blank(),
legend.title = element_blank(),
legend.text = element_text(color = 'white'),
axis.text = element_text(color = 'white'))
runApp('Documents/GitHub/GroupA_WomensHealth/docs')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='sophbei', token='1CA3E973859B7142E81C3C181F5FADB6', secret='QFiEza1sw7cafB5I4dpvvb1bl4gIBajjbokpGD/b')
library(rsconnect)
rsconnect::deployApp(' /Users/sophiebeiers/Documents/GitHub/GroupA_WomensHealth/docs/
')
library(rsconnect)
rsconnect::deployApp('/Users/sophiebeiers/Documents/GitHub/GroupA_WomensHealth/docs/')
shiny::runApp('Documents/GitHub/GroupA_WomensHealth/docs')
library(rsconnect)
rsconnect::deployApp('/Users/sophiebeiers/Documents/GitHub/GroupA_WomensHealth/docs/')
library(rsconnect)
rsconnect::deployApp('/Users/sophiebeiers/Documents/GitHub/GroupA_WomensHealth/docs/')
setwd("~/Documents/GitHub/sophiebeiers.github.io/proj_dogs")
library(tidyverse)
library(tidyverse, quietly = TRUE)
dogs <- read_csv("NYCDogs.csv")
View(dogs)
?count
names <- dogs %>%
group_by(dog_name) %>%
tally(sort = TRUE)
View(names)
names <- names[-1]
names <- dogs %>%
group_by(dog_name) %>%
tally(sort = TRUE)
names <- names[-1,]
names <- dogs %>%
group_by(dog_name) %>%
tally(sort = TRUE)
names <- names[-1,]
names_by_gender <- dogs %>%
group_by(dog_name, gender) %>%
tally(sort = TRUE)
View(names_by_gender)
names_by_gender <- names[-1:2,] # got rid of NA
names_by_gender <- names[-(1:2),] # got rid of NA
View(names_by_gender)
names_by_gender <- dogs %>%
group_by(dog_name, gender) %>%
tally(sort = TRUE)
View(names_by_gender)
names_by_gender <- names_by_gender[-(1:2),] # got rid of NA
View(names_by_gender)
male_dogs <- names_by_gender %>%
filter(gender == "M")
female_dogs <- names_by_gender %>%
filter(gender == "F")
breeds <- dogs %>%
group_by(breed) %>%
tally(sort = TRUE)
View(breeds)
breeds_by_boro <- dogs %>%
group_by(borough, breeds) %>%
tally(sort = TRUE)
breeds_by_boro <- dogs %>%
group_by(borough, breed) %>%
tally(sort = TRUE)
View(breeds_by_boro)
bronx_breeds <- breeds_by_boro %>%
filter(borough == "Bronx")
View(bronx_breeds)
?slice
bronx_breeds <- breeds_by_boro %>%
filter(borough == "Bronx") %>%
slice(1:5)
View(bronx_breeds)
bronx_breeds <- breeds_by_boro %>%
filter(borough == "Bronx") %>%
slice(1:5)
man_breeds <- breeds_by_boro %>%
filter(borough == "Manhattan") %>%
slice(1:5)
brook_breeds <- breeds_by_boro %>%
filter(borough == "Brooklyn") %>%
slice(1:5)
queens_breeds <- breeds_by_boro %>%
filter(borough == "Queens") %>%
slice(1:5)
staten_breeds <- breeds_by_boro %>%
filter(borough == "Staten Island") %>%
slice(1:5)
top5_breeds_boro <- rbind(bronx_breeds, man_breeds, brook_breeds, queens_breeds, staten_breeds)
View(top5_breeds_boro)
breeds_by_boro <- dogs %>%
group_by(borough, breed) %>%
tally(sort = TRUE) %>%
filter(breed != "Mixed/Other")
bronx_breeds <- breeds_by_boro %>%
filter(borough == "Bronx") %>%
slice(1:5)
man_breeds <- breeds_by_boro %>%
filter(borough == "Manhattan") %>%
slice(1:5)
brook_breeds <- breeds_by_boro %>%
filter(borough == "Brooklyn") %>%
slice(1:5)
queens_breeds <- breeds_by_boro %>%
filter(borough == "Queens") %>%
slice(1:5)
staten_breeds <- breeds_by_boro %>%
filter(borough == "Staten Island") %>%
slice(1:5)
top5_breeds_boro <- rbind(bronx_breeds, man_breeds, brook_breeds, queens_breeds, staten_breeds)
write_csv(male_dogs, "male_dogs.csv")
write_csv(female_dogs, "female_dogs.csv")
write_csv(top5_breeds_boro, "top5breeds.csv")
colors <- dogs %>%
group_by(dominant_color) %>%
tally(sort = TRUE)
View(colors)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
tally(sort = TRUE)
View(guess)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
tally(sort = TRUE) %>%
filter(dog_name != "n/a")
View(guess)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
summarise()
View(guess)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE) %>%
select(c(1:3, 10, 41), )
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE)
guess <- select(guess[c(1:3, 10, 41), ])
View(guess)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE)
guess <- select(guess[c(1:3, 10, 41), ])
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE)  %>%
ungroup()
guess <- select(guess[c(1:3, 10, 41), ])
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE)  %>%
ungroup()
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE)  %>%
slice(1:2)
View(guess)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
top_n(n = 5)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
top_n(n = 5, weight = borough)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
top_n(n = 5, wt = borough)
View(guess)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE) %>%
ungroup() %>%
group_by(borough) %>%
top_n(n = 5)
View(guess)
guess <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE) %>%
ungroup() %>%
group_by(borough) %>%
top_n(n = 3)
View(guess)
borrom <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE)
View(borrom)
bottom <- dogs %>%
group_by(borough, dog_name, gender, dominant_color) %>%
filter(dog_name != "n/a") %>%
tally(sort = TRUE) %>%
filter(n == 1)
View(bottom)
write_csv(colors, "colors.csv")
write_csv(guess, "guess.csv")
